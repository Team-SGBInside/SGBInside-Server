generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Creative_Activity {
  activityId   Int     @id @unique @default(autoincrement())
  name         String  @db.VarChar(30)
  activityType String  @db.VarChar(10)
  startDate    String  @db.VarChar(30)
  endDate      String  @db.VarChar(30)
  semester     String  @db.VarChar(10)
  role         String  @db.VarChar(300)
  thoughts     String? @db.VarChar(300)
  writerId     Int
  User         User    @relation(fields: [writerId], references: [userId], onDelete: Cascade, map: "writerId")
}

model User {
  userId                            Int                                 @id @unique @default(autoincrement())
  loginId                           String                              @db.VarChar(20)
  password                          String                              @db.VarChar(200)
  name                              String                              @db.VarChar(20)
  school                            String                              @db.VarChar(20)
  grade                             String                              @db.VarChar(20)
  age                               String                              @db.VarChar(20)
  isTeen                            Boolean
  major                             String?                             @db.VarChar(20)
  Book_Activity                     Book_Activity[]
  Creative_Activity                 Creative_Activity[]
  Prize_Activity                    Prize_Activity[]
  Subject_Detailed_Ability_Activity Subject_Detailed_Ability_Activity[]
}

model Subject_Detailed_Ability_Activity {
  activityId            Int     @id @default(autoincrement())
  subjectName           String  @db.VarChar(20)
  subjectContent        String  @db.VarChar(100)
  activitySemester      String  @db.VarChar(20)
  startDate             String  @db.VarChar(30)
  endDate               String  @db.VarChar(30)
  mainActivity          String  @db.VarChar(100)
  activityContentDetail String  @db.VarChar(300)
  subjectFurtherStudy   String? @db.VarChar(300)
  writerId              Int
  User                  User    @relation(fields: [writerId], references: [userId], onDelete: Cascade, map: "writerId")
}

model Prize_Activity {
  activityId Int     @id @default(autoincrement())
  name       String  @db.VarChar(30)
  prize      String? @db.VarChar(20)
  date       String  @db.VarChar(30)
  semester   String  @db.VarChar(10)
  prizeImage String? @db.VarChar(200)
  role       String  @db.VarChar(300)
  thoughts   String? @db.VarChar(300)
  writerId   Int
  type       String  @db.VarChar(30)
  User       User    @relation(fields: [writerId], references: [userId], onDelete: Cascade, map: "writerId")
}

model Book_Activity {
  activityId     Int     @id(map: "Reading_Activity_pkey") @default(autoincrement())
  titleAuthor    String  @db.VarChar(30)
  endDate        String  @db.VarChar(30)
  semester       String? @db.VarChar(10)
  thoughts       String? @db.VarChar(300)
  relatedSubject String  @db.VarChar(20)
  quote1         String? @db.VarChar(100)
  quote2         String? @db.VarChar(100)
  quote3         String? @db.VarChar(100)
  quote4         String? @db.VarChar(100)
  quote5         String? @db.VarChar(100)
  writerId       Int
  User           User    @relation(fields: [writerId], references: [userId], onDelete: Cascade, map: "writerId")
}

model Activity {
  id         Int     @id @unique(map: "Activity_activityId_key") @default(autoincrement())
  semester   String? @db.VarChar(10)
  activityId Int?
}
